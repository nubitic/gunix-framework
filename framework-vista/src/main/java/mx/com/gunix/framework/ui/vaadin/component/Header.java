package mx.com.gunix.framework.ui.vaadin.component;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import mx.com.gunix.framework.processes.domain.Instancia;
import mx.com.gunix.framework.processes.domain.Tarea;
import mx.com.gunix.framework.processes.domain.Variable;
import mx.com.gunix.framework.security.domain.Aplicacion;
import mx.com.gunix.framework.security.domain.Funcion;
import mx.com.gunix.framework.security.domain.Modulo;
import mx.com.gunix.framework.security.domain.Parametro;
import mx.com.gunix.framework.security.domain.Rol;
import mx.com.gunix.framework.service.ActivitiService;
import mx.com.gunix.framework.ui.vaadin.spring.SpringViewProvider;
import mx.com.gunix.framework.ui.vaadin.view.AbstractGunixView;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.View;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.SingleComponentContainer;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

@Component
@Scope("prototype")
public class Header extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Panel panelContenido;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private GridLayout modulosLayout;

	@AutoGenerated
	private Panel userDetailsPanel;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;

	@AutoGenerated
	private MenuBar menuBar;

	@AutoGenerated
	private ComboBox rolCBox;

	public class TareaActualNavigator extends Navigator {
		private static final long serialVersionUID = 1L;
		private Tarea tareaActual;

		private TareaActualNavigator(UI ui, SingleComponentContainer container) {
			super(ui, container);
		}

		@Override
		protected void navigateTo(View view, String viewName, String parameters) {
			AbstractGunixView agView = (AbstractGunixView) view;
			agView.setTarea(tareaActual);
			super.navigateTo(view, viewName, parameters);
		}

		public void setTareaActual(Tarea tareaActual) {
			this.tareaActual = tareaActual;
		}

	}

	@Autowired
	@Lazy
	ActivitiService as;

	@Autowired
	SpringViewProvider svp;

	TareaActualNavigator navigator;

	final private int MODULOS_POR_FILA = 3;
	private static final long serialVersionUID = 1L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public Header() {
		buildMainLayout();
		rolCBox.setInputPrompt("Seleccione un Rol");
		setCompositionRoot(mainLayout);
		navigator = new TareaActualNavigator(UI.getCurrent(), panelContenido);
		setSizeFull();
	}

	public Navigator getNavigator() {
		return navigator;
	}

	public void renderHeader(Aplicacion aplicacion) {
		setId(getClass().getName()+":"+aplicacion.getIdAplicacion());
		navigator.addProvider(svp);

		mainLayout.setExpandRatio(userDetailsPanel, 0.0f);
		mainLayout.setExpandRatio(modulosLayout, 1.0f);
		horizontalLayout_2.setComponentAlignment(menuBar, Alignment.MIDDLE_LEFT);
		aplicacion.getRoles().stream().forEach(rol -> {
			rolCBox.addItem(rol.getIdRol());
			rolCBox.setItemCaption(rol.getIdRol(), rol.getDescripcion());
		});

		rolCBox.addValueChangeListener(vchlnrEv -> {
			modulosLayout.removeAllComponents();
			modulosLayout.setVisible(true);
			panelContenido.setVisible(false);
			panelContenido.setEnabled(false);
			menuBar.removeItems();
			menuBar.setEnabled(false);
			modulosLayout.setRows(3);// Rows Iniciales
			modulosLayout.setColumns((MODULOS_POR_FILA * 2) + 1);

			Rol rolSel = aplicacion.getRoles().stream().filter(rol -> rol.getIdRol().equals(rolCBox.getValue())).findFirst().get();

			int filasModulos = ((filasModulos = rolSel.getModulos().size()) % MODULOS_POR_FILA == 0) ? filasModulos / MODULOS_POR_FILA : (filasModulos / MODULOS_POR_FILA) + 1;
			if (filasModulos > 1) {
				modulosLayout.setRows(3 + (filasModulos * 2));
			}

			int modulosProcesados = 0;
			for (int row = 0; row < filasModulos; row++) {
				if (row % 2 != 0) {
					modulosLayout.setRowExpandRatio(row, 2 / modulosLayout.getRows());
				} else {
					modulosLayout.setRowExpandRatio(row, 1 / modulosLayout.getRows());
				}
				for (int col = 0; col < MODULOS_POR_FILA; col++) {
					Modulo modulo = rolSel.getModulos().get(modulosProcesados);
					Button button = new Button(modulo.getDescripcion());
					button.addClickListener(clickEvnt -> {
						menuBar.removeItems();
						menuBar.setEnabled(true);
						modulosLayout.setVisible(false);
						modulo.getFunciones().stream().forEach(funcion -> {
							Optional<List<Funcion>> optHijas = Optional.ofNullable(funcion.getHijas());
							MenuItem padre = null;
							if (optHijas.isPresent()) {
								padre = menuBar.addItem(funcion.getTitulo(), null);
							} else {
								padre = menuBar.addItem(funcion.getTitulo(), selectedItem -> {
									Notification.show(funcion.getDescripcion());
								});
							}

							padre.setEnabled(true);
							recorreFuncionesHijas(padre, optHijas);
						});
					});
					modulosLayout.addComponent(button, row + 1, col + 1);

					modulosLayout.setComponentAlignment(button, Alignment.TOP_CENTER);
					modulosProcesados++;
					if (modulosProcesados == rolSel.getModulos().size()) {
						break;
					}
				}
			}
		});

	}

	private void recorreFuncionesHijas(MenuItem padre, Optional<List<Funcion>> optHijas) {
		optHijas.ifPresent(hijas -> {
			hijas.stream().forEach(funcion -> {
				Optional<List<Funcion>> optHijas2 = Optional.ofNullable(funcion.getHijas());
				MenuItem nvoPadre = null;
				if (optHijas2.isPresent()) {
					nvoPadre = padre.addItem(funcion.getTitulo(), null);
				} else {
					nvoPadre = padre.addItem(funcion.getTitulo(), selectedItem -> {
						Instancia instancia = as.iniciaProceso(funcion.getProcessKey(), aVariables(funcion.getParametros()), "");
						try {
							navigator.setTareaActual(instancia.getTareaActual());
							navigator.navigateTo(instancia.getTareaActual().getVista());
							modulosLayout.setVisible(false);
							panelContenido.setVisible(true);
							panelContenido.setEnabled(true);
						} finally {
							navigator.setTareaActual(null);
						}
					});
				}
				nvoPadre.setEnabled(true);
				recorreFuncionesHijas(nvoPadre, optHijas2);
			});
		});
	}

	private List<Variable<?>> aVariables(List<Parametro> parametros) {
		List<Variable<?>> vars = new ArrayList<Variable<?>>();
		parametros.stream().forEach(p -> {
			vars.add(Variable.fromParametro(p));
		});
		return vars;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// userDetailsPanel
		userDetailsPanel = buildUserDetailsPanel();
		mainLayout.addComponent(userDetailsPanel);
		mainLayout.setComponentAlignment(userDetailsPanel, new Alignment(6));
		
		// modulosLayout
		modulosLayout = new GridLayout();
		modulosLayout.setImmediate(false);
		modulosLayout.setWidth("-1px");
		modulosLayout.setHeight("-1px");
		modulosLayout.setMargin(false);
		modulosLayout.setSpacing(true);
		mainLayout.addComponent(modulosLayout);
		mainLayout.setExpandRatio(modulosLayout, 20.0f);
		mainLayout.setComponentAlignment(modulosLayout, new Alignment(48));
		
		// panelContenido
		panelContenido = buildPanelContenido();
		mainLayout.addComponent(panelContenido);
		mainLayout.setComponentAlignment(panelContenido, new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildUserDetailsPanel() {
		// common part: create layout
		userDetailsPanel = new Panel();
		userDetailsPanel.setImmediate(false);
		userDetailsPanel.setWidth("100.0%");
		userDetailsPanel.setHeight("65px");
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		userDetailsPanel.setContent(horizontalLayout_2);
		
		return userDetailsPanel;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("100.0%");
		horizontalLayout_2.setHeight("100.0%");
		horizontalLayout_2.setMargin(true);
		horizontalLayout_2.setSpacing(true);
		
		// rolCBox
		rolCBox = new ComboBox();
		rolCBox.setImmediate(true);
		rolCBox.setWidth("100.0%");
		rolCBox.setHeight("100.0%");
		horizontalLayout_2.addComponent(rolCBox);
		horizontalLayout_2.setExpandRatio(rolCBox, 1.0f);
		
		// menuBar
		menuBar = new MenuBar();
		menuBar.setEnabled(false);
		menuBar.setImmediate(false);
		menuBar.setWidth("100.0%");
		menuBar.setHeight("-1px");
		horizontalLayout_2.addComponent(menuBar);
		horizontalLayout_2.setExpandRatio(menuBar, 3.0f);
		
		return horizontalLayout_2;
	}

	@AutoGenerated
	private Panel buildPanelContenido() {
		// common part: create layout
		panelContenido = new Panel();
		panelContenido.setEnabled(false);
		panelContenido.setImmediate(false);
		panelContenido.setVisible(false);
		panelContenido.setWidth("100.0%");
		panelContenido.setHeight("100.0%");
		
		// verticalLayout_2
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setEnabled(false);
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setVisible(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		panelContenido.setContent(verticalLayout_2);
		
		return panelContenido;
	}
}
