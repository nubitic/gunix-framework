package mx.com.gunix.ui.vaadin.view.adminapp.aplicacion.components;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import mx.com.gunix.framework.security.domain.Parametro;
import mx.com.gunix.framework.ui.vaadin.component.GunixBeanFieldGroup;
import mx.com.gunix.framework.ui.vaadin.component.GunixTableFieldFactory;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.server.UserError;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Table;
import com.vaadin.ui.Window;

public class ParametrosForm extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private FormLayout mainLayout;
	@AutoGenerated
	private Button cerrarButton;
	@AutoGenerated
	private Table parametrosTable;
	@AutoGenerated
	private Button agregarButton;
	private static final long serialVersionUID = 1L;

	private List<Parametro> parametros = new ArrayList<Parametro>();

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ParametrosForm(Window window, boolean esSoloLectura) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		parametrosTable.setTableFieldFactory(new GunixTableFieldFactory());
		parametrosTable.addContainerProperty("nombre", String.class, "", "Parámetro", null, null);
		parametrosTable.addContainerProperty("valor", String.class, "", "Valor", null, null);

		parametrosTable.setColumnExpandRatio("nombre", 1f);
		parametrosTable.setColumnExpandRatio("valor", 1f);

		parametrosTable.setPageLength(5);
		parametrosTable.setEditable(!esSoloLectura);
		if (!esSoloLectura) {
			agregarButton.addClickListener(clickEvnt -> {
				Parametro p = new Parametro();
				BeanItem<Parametro> beanItem = new BeanItem<Parametro>(p);
				GunixBeanFieldGroup<Parametro> bfgf = new GunixBeanFieldGroup<Parametro>(Parametro.class);
				bfgf.setItemDataSource(beanItem);
				parametrosTable.addItem(bfgf);
				parametros.add(p);
			});
		} else {
			agregarButton.setVisible(false);
		}

		cerrarButton.addClickListener(clickEvnt -> {
			if (!esSoloLectura && !commit()) {
				Notification.show("Alguno de los parámetros tiene errores, favor de verificar", Type.ERROR_MESSAGE);
			} else {
				window.close();
			}
		});

	}

	private boolean commit() {
		parametrosTable.setComponentError(null);
		return validaParametros();
	}

	@SuppressWarnings("unchecked")
	private boolean validaParametros() {
		boolean sinErrores = true;
		IndexedContainer container = (IndexedContainer) parametrosTable.getContainerDataSource();
		for (Object parametro : container.getItemIds()) {
			sinErrores = sinErrores & validaParametro(container, ((GunixBeanFieldGroup<Parametro>) parametro));
		}
		return sinErrores;
	}

	@SuppressWarnings("unchecked")
	private boolean validaParametro(IndexedContainer container, GunixBeanFieldGroup<Parametro> bfgf) {
		boolean sinErrores = true;
		Iterator<Component> componentIterator = parametrosTable.iterator();

		if (componentIterator != null) {
			Property<String> nombreProp = container.getContainerProperty(bfgf, "nombre");
			Property<String> valorProp = container.getContainerProperty(bfgf, "valor");
			int components = 0;
			Map<Field<String>, Property<?>> prevPropDS = new HashMap<Field<String>, Property<?>>();
			while (componentIterator.hasNext()) {
				Component c = componentIterator.next();
				if (c instanceof Field) {
					Field<String> field = (Field<String>) c;
					if (field.getPropertyDataSource().equals(nombreProp)) {
						prevPropDS.put(field, field.getPropertyDataSource());
						((AbstractComponent) field).setComponentError(null);
						bfgf.bind(field, "nombre");
						field.setValue(nombreProp.getValue());
						components++;
					} else {
						if (field.getPropertyDataSource().equals(valorProp)) {
							prevPropDS.put(field, field.getPropertyDataSource());
							((AbstractComponent) field).setComponentError(null);
							bfgf.bind(field, "valor");
							field.setValue(valorProp.getValue());
							components++;
						}
					}
				}
				if (components == 2) {
					break;
				}
			}

			try {
				bfgf.commit();
				sinErrores = true;
			} catch (CommitException e) {
				sinErrores = false;
				for (Field<?> f : e.getInvalidFields().keySet()) {
					((AbstractComponent) f).setComponentError(new UserError(e.getInvalidFields().get(f).getCauses()[0].getMessage()));
				}
			} finally {
				for (Field<?> f : prevPropDS.keySet()) {
					bfgf.unbind(f);
					f.setPropertyDataSource(prevPropDS.get(f));
					f.setBuffered(false);
				}
			}
		}
		return sinErrores;
	}

	public List<Parametro> getParametros() {
		return parametros;
	}

	@AutoGenerated
	private FormLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new FormLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// agregarButton
		agregarButton = new Button();
		agregarButton.setCaption("Agregar");
		agregarButton.setImmediate(true);
		agregarButton.setWidth("-1px");
		agregarButton.setHeight("-1px");
		mainLayout.addComponent(agregarButton);

		// parametrosTable
		parametrosTable = new Table();
		parametrosTable.setImmediate(false);
		parametrosTable.setWidth("100.0%");
		parametrosTable.setHeight("-1px");
		parametrosTable.setInvalidAllowed(false);
		mainLayout.addComponent(parametrosTable);

		// cerrarButton
		cerrarButton = new Button();
		cerrarButton.setCaption("Cerrar");
		cerrarButton.setImmediate(false);
		cerrarButton.setWidth("-1px");
		cerrarButton.setHeight("-1px");
		mainLayout.addComponent(cerrarButton);

		return mainLayout;
	}

	public void setParametros(List<Parametro> parametros) {
		this.parametros = parametros;
		for (Parametro p : parametros) {
			BeanItem<Parametro> beanItem = new BeanItem<Parametro>(p);
			GunixBeanFieldGroup<Parametro> bfgf = new GunixBeanFieldGroup<Parametro>(Parametro.class);
			bfgf.setItemDataSource(beanItem);
			parametrosTable.addItem(new Object[] { p.getNombre(), p.getValor() }, bfgf);
		}
	}
}
